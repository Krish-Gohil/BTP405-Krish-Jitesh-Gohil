# Define the Vehicle class
class Vehicle:
    def __init__(self, manufacturer, model, vtype, cost, mileage):
        self.manufacturer = manufacturer
        self.model = model
        self.vtype = vtype
        self.cost = cost
        self.mileage = mileage

    def __repr__(self):
        return (f"Vehicle({self.manufacturer}, {self.model}, {self.vtype}, "
                f"Cost: ${self.cost}, Mileage: {self.mileage} km)")

    def __lt__(self, other):
        return self.cost < other.cost  # Default comparison for sorting

# Define the sort function with configurable sorting algorithm
def sort(lst, alg):
    return alg(lst)

#The below selection algorithms were AI generated, selection sort, mergesort and bubblesort algorithms were generated by perplexity AI
# Selection Sort
def selection_sort(lst):
    lst = lst[:]
    for i in range(len(lst)):
        min_index = i
        for j in range(i + 1, len(lst)):
            if lst[j] < lst[min_index]:
                min_index = j
        lst[i], lst[min_index] = lst[min_index], lst[i]
    return lst

# Merge Sort
def merge_sort(lst):
    if len(lst) <= 1:
        return lst
    mid = len(lst) // 2
    left = merge_sort(lst[:mid])
    right = merge_sort(lst[mid:])
    return merge(left, right)

def merge(left, right):
    result = []
    i = j = 0
    while i < len(left) and j < len(right):
        if left[i] < right[j]:
            result.append(left[i])
            i += 1
        else:
            result.append(right[j])
            j += 1
    result.extend(left[i:])
    result.extend(right[j:])
    return result

# Bubble Sort
def bubble_sort(lst):
    lst = lst[:]
    n = len(lst)
    for i in range(n):
        for j in range(0, n - i - 1):
            if lst[j] > lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
    return lst